#!/usr/bin/env python3

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
from pathlib import Path
import sys

from ament_index_python.packages import get_package_share_directory
from rosidl_cmake import expand_template

TEMPLATE_DIR = Path(get_package_share_directory('rtt_ros2_pkg')) / 'template'
AVAILABLE_TRANSPORTS = (
  'ros',
)
DEFAULT_TRANSPORTS = ['ros']


def create_package(package, create, **kwargs):
    print ("New package name {}".format(package))
    # Create package directory
    print(create)
    component=False;
    deploy=False;
    plugin=False;
    service=False;
    if 'all' in create:
        component=True;
        deploy=True
        plugin=True;
        service=True;
        print('Generating templates for a component, deploy files, a plugin, a service.')
    if 'component' in create:
        component=True;
        print('Generating templates for a component.')
    if 'plugin' in create:
        plugin=True
        print('Generating templates for a plugin.')
    if 'service' in create:
        service=True
        print('Generating templates for a service.')
    if 'deploy' in create:
        deploy=True
        print('Generating templates for deploy files.')
    if kwargs.get('destination_directory', None):
        destination_directory = Path(kwargs['destination_directory'])
    else:
        destination_directory = Path.cwd()
    destination_directory = destination_directory / f"{package}"
    try:
        destination_directory.mkdir(parents=True)
    except(FileExistsError):
        print("A package with the same name alredy exists, Please delete it manually.")
        exit(-1)

    # Generate files
    data = kwargs
    data.update({
        'package': package,
        'component': component,
        'plugin': plugin,
        'service' : service,
        'deploy' : deploy
    })
    for file in ('package.xml', 'CMakeLists.txt'):
        new_file_name=destination_directory/file.replace("pkgname", package)
        print("Generating File {}".format(new_file_name))
        expand_template(
                file,
                data = data,
                output_file = new_file_name,
                template_basepath = TEMPLATE_DIR
            )
    if component:
        for file in ('src/pkgname-component.cpp','src/pkgname-component.hpp'):
            new_file_name=destination_directory/file.replace("pkgname", package)
            print("Generating File {}".format(new_file_name))
            expand_template(
            file,
            data=data,
            output_file=(new_file_name),
            template_basepath=TEMPLATE_DIR)
    if plugin:
        for file in (['src/pkgname-plugin.cpp']):
            new_file_name=destination_directory/file.replace("pkgname", package)
            print("Generating File {}".format(new_file_name))
            expand_template(
            file,
            data=data,
            output_file=(new_file_name),
            template_basepath=TEMPLATE_DIR)
    if service:
        for file in (['src/pkgname-service.cpp']):
            new_file_name=destination_directory/file.replace("pkgname", package)
            print("Generating File {}".format(new_file_name))
            expand_template(
            file,
            data=data,
            output_file=(new_file_name),
            template_basepath=TEMPLATE_DIR)
    if deploy:
        for file in ('scripts/deploy.lua', 'launch/example.launch.py', 'README.md'):
            new_file_name=destination_directory/file.replace("pkgname", package)
            print("Generating File {}".format(new_file_name))
            expand_template(
            file,
            data=data,
            output_file=(new_file_name),
            template_basepath=TEMPLATE_DIR)



def main(argv=sys.argv[1:]):
    parser = argparse.ArgumentParser(
        description='Generate an RTT package.',
        formatter_class=argparse.RawTextHelpFormatter)
    
    parser.add_argument(
        'package', metavar='PACKAGE',
        help='The name of the interface package')

    parser.add_argument(
        '--destination-directory', '-d',
        default='.',
        help='Directory where to create the package directory (not including the package name)')
    parser.add_argument(
            '--create',choices=['all', 'component', 'deploy', 'plugin', 'service'], nargs="+",default=['component'],
            help='Provide the possible choices that can be used in the autogenerated files. One or more options can be passed.'
            '\nall:  produces all the templates'
            '\ncomponent:  produces templates for a conpmponent,'
            '\ncomponent:  produces templates for a deploy - lua and launch files, normally requires that components are generated too,'
            '\ncomponent:  produces templates for a plugin,'
            '\ncomponent:  produces templates for a service.'
            )


    #pkg_option_group=parser.add_argument_group('package options')
    #pkg_option_group.add_argument("component", action="store_true")
#    plugins_group = parser.add_argument_group('plugin options')
#    plugins_group.add_argument(
#        '--transports', nargs='+', metavar='TRANSPORT', choices=AVAILABLE_TRANSPORTS,
#        default=DEFAULT_TRANSPORTS,
#        help='Whether to add a ROS transport plugin (available: ' +
#             ' '.join(AVAILABLE_TRANSPORTS) + ')')
#    plugins_group.add_argument(
#        '--no-transport', action='store_const', dest='transports', const=[],
#        default=argparse.SUPPRESS,
#        help='Create a pure typekit package (no transport plugins)')

    package_xml_group = parser.add_argument_group('package.xml options')
    package_xml_group.add_argument(
        '--description',
        default='Automatic-generated rtt package for ros2 integration',
        help='The description given in the package.xml')
    package_xml_group.add_argument(
        '--license',
        default='Apache License 2.0',
        help='The license attached to this package')
    package_xml_group.add_argument(
        '--maintainer-email',
        default='orocos-dev@orocos.org',
        help='email address of the maintainer of this package')
    package_xml_group.add_argument(
        '--maintainer-name',
        default='Orocos Developers',
        help='name of the maintainer of this package')

    args = parser.parse_args(argv)
    return create_package(**vars(args))


if __name__ == '__main__':
    main()
